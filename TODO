[TODO]
* rendering process
* compiled library should be automatically import
* vector<SCALAR> should re-define name
* need to refactoring.
* refactoring for world parser
* implement other joints
    * spring
* visualization diversity
    * only edges
    * view contact points
    * colors
    * rays
* RL interface
    * method for return (s, a, r, ...)
* separate physics, rendering
    * only physics mode
* connect to RL python library
    * pybind
    * openAI gymnasium
    * rllib
* 3D version


---
# note / memo
---


## proxy design

vector<VERTEX_LIST> world::Step(vector<Vector2> action)
{
    'physics pipeline'
            .
            .
            .
    
    // apply action

    vector<Vector2> state = new_state;
    SCALAR reward = GetReward(state);
    return state, reward;
}

---



## for environment presets

AddImpulse method
- impulse, apply point vectors are world coord

to json
- body id
- apply point - local
- apply direction - local
- apply impulse magnitude
- action type - discrete? continuous?

world logic
- velocity integrate to all action point.
- receive action signals

action struct
- body id
- point
- direction
- magnitude