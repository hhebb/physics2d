[TODO]
* control, action
    * add 'action interface' to env preset
    * method for control - each env preset
* refactoring for world parser
* implement other joints
    * spring
* visualization diversity
    * only edges
    * view contact points
    * colors
    * rays
* RL interface
    * method for return (s, a, r, ...)
* separate physics, rendering
    * only physics mode
* connect to RL python library
    * pybind
    * openAI gymnasium
    * rllib
* 3D version


---
# note / memo
---

## proxy design




def Step(action):
    # send action to P.E
    proxy.InputAction(action)
    
    # wait for calculatiog
    while proxy.ready:
        pass
    
    # get updated state, reward
    state = proxy.GetState()
    reward = proxy.GetReward()

    return state, reward


---



## for environment presets

AddImpulse method
- impulse, apply point vectors are world coord

to json
- body id
- apply point - local
- apply direction - local
- apply impulse magnitude
- action type - discrete? continuous?

world logic
- velocity integrate to all action point.
- receive action signals

action struct
- body id
- point
- direction
- magnitude